=begin
Строка называется палиндромом если она имеет абсолютно одинаковую последовательность символов с права на лево и слева на право, для примера:
"kayak",
"abcba",
"neven".
Строка A называется анаграммой  к строке  B если  A может быть получена из B путем перестановки символов. Для примера строки из этих пар являются анаграммами к друг другу:

"mary" and "army",
"rocketboys" and "octobersky",
"divide" and "divide".
Необходимо написать функцию:

def solution(s)

которая для переданной непустой строки S состоящей из N символов вернет 1 если S анаграмма какого-то полиндрома и вернет 0 в обратном случае.

Предполагаем:

N число в диапазоне [0..100,000];
строка S состоит только из латинских букв в нижнем регистре (a−z).
Для примера, для строки S = "dooernedrn", функция должна вернуть 1,так как "dooernedrn" анаграмма палиндрома "neroddoren".Для строки S = "aabcba", функция должна вернуть 0.

Сложность алгоритма должна быть:

для самого худшего случая не более чем O(N);
=end


=begin
Идея решения:
Палиндром симметричен относительно центра, есть два варианта
чётное кол-во букв - тогда две зеркальные половины
нечётное кол-во букв - половина |c| аниволоп 

Критерий того, что из букв можно составить палиндром:
всех букв чётное кол-во, кроме, может быть, одной
	
=end

def solution(s)
	letters_count = {}
	('a'..'z').each do |l|
		letters_count[l] = 0
	end

	s.each_char do |c|
		letters_count[c] += 1
	end

	count_of_odd = 0
	letters_count.each do |letter, count|
		count_of_odd += 1 if (count % 2 == 1)
		return 0 if count_of_odd > 1
	end
	return 1
end

examples = [
	"mary",
	"army",
	"dooernedrn",
	"aaabbcc",
	"aaabbbccc",
	"zzzaaxaax"
	]

examples.each do |s|
	puts s + " -> " + solution(s).to_s
end